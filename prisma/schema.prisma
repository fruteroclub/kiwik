generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String         @id @default(uuid())
  appWallet          String?        @unique
  username           String?        @unique
  displayName        String?
  extWallet          String?        @unique
  email              String?        @unique
  bio                String?
  website            String?
  avatarUrl          String?
  bannerUrl          String?
  metadata           String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  comments           Comment[]
  engagement         Engagement[]
  projects           Project[]
  ownedTokenLaunches TokenLaunch[]
  votes              Vote[]
  weeklyGoals        WeeklyGoal[]
  weeklyUpdates      WeeklyUpdate[]

  @@index([appWallet, username, extWallet, email])
  @@map("users")
}

model Project {
  id               String            @id @default(uuid())
  userId           String
  title            String
  description      String?
  problemStatement String?
  solutionOverview String?
  targetMarket     String?
  category         String?
  visibility       ProjectVisibility @default(PUBLIC)
  status           ProjectStatus     @default(ACTIVE)
  startDate        DateTime?
  targetEndDate    DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  engagement       Engagement[]
  milestones       Milestone[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenLaunches    TokenLaunch[]
  votes            Vote[]
  weeklyGoals      WeeklyGoal[]
  weeklyUpdates    WeeklyUpdate[]

  @@index([userId, status, visibility])
  @@map("projects")
}

model Milestone {
  id          String    @id @default(uuid())
  projectId   String
  weekNumber  Int?
  title       String
  description String?
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, weekNumber])
  @@map("milestones")
}

model WeeklyGoal {
  id            String     @id @default(uuid())
  projectId     String
  userId        String
  weekStartDate DateTime
  goals         Json
  status        GoalStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  project       Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, weekStartDate])
  @@index([userId, weekStartDate])
  @@map("weekly_goals")
}

model WeeklyUpdate {
  id              String    @id @default(uuid())
  projectId       String
  userId          String
  weekNumber      Int?
  weekStartDate   DateTime?
  wins            String?
  challenges      String?
  metrics         Json?
  nextWeekPreview String?
  mediaUrls       Json?
  farcasterCastId String?
  createdAt       DateTime  @default(now())
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, weekStartDate])
  @@index([userId, weekStartDate])
  @@map("weekly_updates")
}

model Engagement {
  id         String               @id @default(uuid())
  userId     String
  projectId  String?
  targetType EngagementTargetType
  targetId   String
  actionType EngagementActionType
  metadata   Json?
  createdAt  DateTime             @default(now())
  project    Project?             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, actionType])
  @@index([projectId, actionType])
  @@index([targetType, targetId])
  @@map("engagement")
}

model TokenLaunch {
  id             String            @id @default(uuid())
  projectId      String
  userId         String
  tokenAddress   String?
  tokenSymbol    String?
  tokenName      String?
  totalSupply    BigInt?
  launchDate     DateTime?
  clankerTxHash  String?
  allocationData Json?
  status         TokenLaunchStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  project        Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId, status])
  @@index([userId, status])
  @@map("token_launches")
}

model Vote {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  vote      Boolean
  reason    String?
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId, vote])
  @@map("votes")
}

model Comment {
  id         String            @id @default(uuid())
  userId     String
  targetType CommentTargetType
  targetId   String
  parentId   String?
  content    String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  parent     Comment?          @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[]         @relation("CommentReplies")
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([targetType, targetId])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  COMMUNITY
}

enum ProjectStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum EngagementTargetType {
  PROJECT
  UPDATE
  COMMENT
  USER
}

enum EngagementActionType {
  LIKE
  COMMENT
  SHARE
  FOLLOW
  UNFOLLOW
  REACT
}

enum TokenLaunchStatus {
  PENDING
  LAUNCHED
  FAILED
  CANCELLED
}

enum CommentTargetType {
  PROJECT
  UPDATE
}
